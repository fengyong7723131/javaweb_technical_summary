<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">



    <bean id="userService" class="com.product.service.user.impl.UserServiceImpl"></bean>
    <!--<aop:config>-->
        <!--<aop:pointcut id="query" expression="execution(* com.productt.service..impl.*ServiceImpl.query*(..))"></aop:pointcut>-->

        <!--&lt;!&ndash; 后置通知 &ndash;&gt;-->
        <!--<aop:aspect ref="adviceCacheTest">-->
            <!--<aop:after method="after" pointcut-ref="query"></aop:after>-->
            <!--<aop:after-returning method="afterReturning" pointcut-ref="query" returning="obj"></aop:after-returning>-->
            <!--<aop:before method="before" pointcut-ref="query"></aop:before>-->
            <!--<aop:around method="around" pointcut-ref="query"></aop:around>-->
            <!--<aop:after-throwing method="afterThorwing" pointcut-ref="query" throwing="e"></aop:after-throwing>-->
        <!--</aop:aspect>-->

    <!--</aop:config>-->

    <bean id="redisCacheAop" class="com.product.aop.RedisCacheAop"></bean>
    <aop:config>
        <!-- 后置通知 -->
        <aop:aspect ref="redisCacheAop">
            <aop:around method="cached"  pointcut="@annotation(cache))" ></aop:around>
        </aop:aspect>
    </aop:config>

    <!--
         1. 前置通知
            * 在目标类的方法执行之前执行。
            * 配置文件信息：<aop:after method="before" pointcut-ref="myPointcut3"/>
            * 应用：可以对方法的参数来做校验

        2. 最终通知
            * 在目标类的方法执行之后执行，如果程序出现了异常，最终通知也会执行。
            * 在配置文件中编写具体的配置：<aop:after method="after" pointcut-ref="myPointcut3"/>
            * 应用：例如像释放资源

        3. 后置通知
            * 方法正常执行后的通知。
            * 在配置文件中编写具体的配置：<aop:after-returning method="afterReturning" pointcut-ref="myPointcut2"/>
            * 应用：可以修改方法的返回值

        4. 异常抛出通知
            * 在抛出异常后通知
            * 在配置文件中编写具体的配置：<aop:after-throwing method="afterThorwing" pointcut-ref="myPointcut3"/>
            * 应用：包装异常的信息

        5. 环绕通知
            * 方法的执行前后执行。
            * 在配置文件中编写具体的配置：<aop:around method="around" pointcut-ref="myPointcut2"/>
            * 要注意：目标的方法默认不执行，需要使用ProceedingJoinPoint对来让目标对象的方法执行。

         -->
</beans>